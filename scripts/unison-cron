#!/bin/bash
#exec 1>/dev/null;
#set -xv

# Vars
TMPDIR=/var/tmp
HOST=$1
CONFIG=$2
EMAIL=$3
FLAGFILE=${CONFIG}-${LOGNAME}
FLAG=${TMPDIR}/${FLAGFILE}

# Functions
check_unison()
{
if ps -ef | grep $LOGNAME | grep "unison $CONFIG" | grep -vE "grep|ssh|bash" &>/dev/null;
then
  return 1
else
  return 0
fi
} # check_unison

check_network()
{
# If default route does not answer on dns port, then exit
nc -z `ip r | grep default | cut -d ' ' -f 3` 53 &>/dev/null || return 1

if ! unison -testServer $CONFIG &>/dev/null;
then

#  if [ ! -f $FLAG ];
#  then
#    cat << EOF | mailx -s "$HOSTNAME:~$LOGNAME/.unison/$CONFIG is late, OOPS!!" $EMAIL
#EOF
#    touch $FLAG
#  else
    # check, ob FLAG Ã¤lter als 12h
#    find $TMPDIR -maxdepth 1 -type f -name $FLAGFILE -mmin +720 -delete
#  fi
  return 1
fi

Hops=`tracepath6 $HOST | wc -l`

if [ "$Hops" -gt "10" ];
then
  # Do not start if to many hops to the server. We assume we are not in local
  # wlan.
  return 1
fi

return 0
} # check_network

start_unison()
{

cat << EOF | mailx -s "$HOSTNAME:~$LOGNAME/.unison/$CONFIG started, YEAH!!" $EMAIL
`tail -n 2 ~/unison*.log`
EOF

unison $CONFIG -batch -auto -repeat 300 -silent &

if [ -f $FLAG ];
then
  rm $FLAG
fi
} # start_unison

# Main

if [ -z $HOST ] || [ -z $CONFIG ] || [ -z $EMAIL ];
then
  echo "Usage: ./unison-cron server sync-to-server.prf email@domain.tld"
  exit 3
fi


check_unison && check_network && start_unison
